const express = require("express");
const cors = require("cors");
const path = require("path");
const dotenv = require('dotenv');
const pool = require("./db");
const bcrypt = require("bcrypt");
const saltRounds = 10;
const jwt = require('jsonwebtoken');
require('dotenv').config({ path: path.join(__dirname, '.env') });

// تحقق من تحميل المتغيرات البيئية
console.log('JWT Secret Loaded:', process.env.JWT_SECRET ? '✅ Yes' : '❌ No');

const app = express();

// ✅ إعداد CORS
app.use(cors({
  origin: "http://localhost:3000", // أو أي نطاق تستخدمه
  methods: ["GET", "POST"],
  credentials: true
}));

// ✅ السماح باستخدام JSON في الطلبات
app.use(express.json());

// ✅ جعل Express يخدم الملفات الثابتة (لتشغيل HTML + CSS + JS مباشرة)
app.use(express.static(path.join(__dirname, "front")));

// ✅ استيراد المسارات
const roomRoutes = require("./routes/rooms");
const patientRoutes = require("./routes/patients");
const entryRoutes = require("./routes/entries");
const valveRoutes = require("./routes/valves");
const userRoutes = require("./routes/users");
const sessionRoutes = require("./routes/sessions");

// ✅ استخدام المسارات
app.use("/api/rooms", roomRoutes);
app.use("/api/patients", patientRoutes);
app.use("/api/entries", entryRoutes);
app.use("/api/valve_status", valveRoutes);
app.use("/api/users", userRoutes);
app.use("/api/sessions", sessionRoutes);

// 🔐 تسجيل الدخول
app.post("/api/login", async (req, res) => {
  try {
      // التحقق من البيانات المدخلة
      if (!req.body?.email || !req.body?.password) {
          return res.status(400).json({ 
              success: false,
              message: "البريد الإلكتروني وكلمة المرور مطلوبان"
          });
      }

      const { email, password } = req.body;
      console.log("بيانات تسجيل الدخول:", { email });

      // البحث عن المستخدم
      const user = await pool.query(
          "SELECT id, name, email, password FROM users WHERE email = $1", 
          [email]
      );

      if (user.rows.length === 0) {
          return res.status(401).json({
              success: false,
              message: "بيانات الدخول غير صحيحة"
          });
      }

      // التحقق من كلمة المرور
      const validPassword = await bcrypt.compare(password, user.rows[0].password);
      if (!validPassword) {
          return res.status(401).json({
              success: false,
              message: "بيانات الدخول غير صحيحة"
          });
      }

      // التحقق من وجود المفتاح السري
      if (!process.env.JWT_SECRET) {
        console.error('❌ خطأ حرج: JWT_SECRET غير معرّف!');
        console.log('المسار المفحوص:', path.resolve(__dirname, '.env'));
        process.exit(1);
      } else {
        console.log('✅ تم تحميل JWT_SECRET بنجاح');
      }
      

      // إنشاء التوكن
      const token = jwt.sign(
        { 
          user_id: user.rows[0].id,
          email: user.rows[0].email
        },
        process.env.JWT_SECRET, // استخدام المفتاح الذي أنشأته
        { 
          expiresIn: '1h',
          algorithm: 'HS256'
        }
      );

      return res.json({
          success: true,
          token,
          user: {
              id: user.rows[0].id,
              name: user.rows[0].name,
              email: user.rows[0].email
          }
      });

  } catch (err) {
      console.error("🔥 خطأ في تسجيل الدخول:", {
          error: err.message,
          stack: err.stack,
          timestamp: new Date().toISOString()
      });
      
      return res.status(500).json({
          success: false,
          message: "حدث خطأ تقني",
          error: process.env.NODE_ENV === 'development' ? err.message : undefined
      });
  }
});

// 📝 تسجيل مستخدم جديد
app.post("/api/register", async (req, res) => {
  try {
      const { name, email, password } = req.body;
      const hashedPassword = await bcrypt.hash(password, saltRounds); // ✅ تشفير كلمة المرور

      const newUser = await pool.query(
          "INSERT INTO users (name, email, password, created_at) VALUES ($1, $2, $3, NOW()) RETURNING id, name, email",
          [name, email, hashedPassword] // ✅ استخدام كلمة المرور المشفرة
      );

      res.status(201).json({
          message: "تم إنشاء المستخدم بنجاح",
          user: newUser.rows[0]
      });
  } catch (err) {
      console.error("🚨 خطأ أثناء التسجيل:", err);
      res.status(500).json({ message: "خطأ في السيرفر" });
  }

});

// ✅ إعادة توجيه أي طلب غير موجود إلى الصفحة الرئيسية
app.get("*", (req, res) => {
    res.sendFile(path.join(__dirname, "front", "login.html"));
});

// ✅ التعامل مع الأخطاء العامة
app.use((err, req, res, next) => {
    console.error("❌ Internal Server Error:", err.message);
    res.status(500).json({ error: err.message });
});

// ✅ تشغيل السيرفر
if (process.env.NODE_ENV !== "test") {
    const PORT = process.env.PORT || 3000;
    app.listen(PORT, () => {
        console.log(`🚀 Server running on port: http://localhost:${PORT}`);
    });
}

module.exports = app;







 const response = await fetch('/api/login', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': 'application/json'
                },
                body: JSON.stringify({ email, password })
            });

            const data = await response.json();

            if (!response.ok) {
                throw new Error(data.message || 'فشل تسجيل الدخول');
            }

            // حفظ التوكن في localStorage
            if (data.token) {
                localStorage.setItem('authToken', data.token);
                localStorage.setItem('user', JSON.stringify(data.user));
            }

            // توجيه المستخدم بعد تسجيل الدخول
            window.location.href = data.redirectTo || '/room.html';

        } catch (error) {
            console.error('Error:', error);
            showAlert('error', error.message || 'حدث خطأ أثناء تسجيل الدخول');
        } finally {
            submitBtn.disabled = false;
            submitBtn.textContent = originalBtnText;
        }
    });
});

















 document.querySelector('.sign-in form').addEventListener('submit', async (e) => {
        e.preventDefault();
        console.log("تم الضغط على زر تسجيل الدخول!");
        
        const form = e.target;
        const email = form.email.value;
        const password = form.password.value;

        const submitBtn = form.querySelector('button');
        const originalBtnText = submitBtn.textContent;
        submitBtn.disabled = true;
        submitBtn.innerHTML = '<i class="bx bx-loader-alt bx-spin"></i> جاري المعالجة...';
             
        try {
          
            const response = await fetch('/api/login', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': 'application/json'
                },
                body: JSON.stringify({ email, password })
            });

            const data = await response.json();

            if (!response.ok) {
                throw new Error(data.message || 'فشل تسجيل الدخول');
            }

            // حفظ التوكن في localStorage
            if (data.token) {
                localStorage.setItem('authToken', data.token);
                localStorage.setItem('user', JSON.stringify(data.user));
            }

            // توجيه المستخدم بعد تسجيل الدخول
            window.location.href = data.redirectTo || '/room.html';

        } catch (error) {
            console.error('Error:', error);
            showAlert('error', error.message || 'حدث خطأ أثناء تسجيل الدخول');
        } finally {
            submitBtn.disabled = false;
            submitBtn.textContent = originalBtnText;
        }
    });
});